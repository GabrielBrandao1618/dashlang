quote                            = _{ "\"" }
text                             = @{ (!("\"") ~ ANY)* }
string                           = ${ quote ~ text ~ quote }
float                            = ${ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
int                              = ${ "-"? ~ ASCII_DIGIT+ }
boolean                          =  { "true" | "false" }
vector                           =  { "[" ~ expression? ~ ("," ~ expression)* ~ "]" }
keyword                          =  { "return" }
symbol                           = @{ !(keyword | boolean) ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
assignment_expression            =  { symbol ~ "=" ~ expression }
compound_assignment_expr         =  { symbol ~ binary_operator ~ "=" ~ expression }
add                              =  { "+" }
sub                              =  { "-" }
mul                              =  { "*" }
div                              =  { "/" }
ge                               =  { ">=" }
gt                               =  { ">" }
le                               =  { "<=" }
lt                               =  { "<" }
eq                               =  { "==" }
or                               =  { "||" }
and                              =  { "&&" }
bitwise_and                      =  { "&" }
bitwise_or                       =  { "|" }
bitwise_xor                      =  { "^" }
bitwise_left_shift               =  { "<<" }
bitwise_right_shift              =  { ">>" }
binary_operator                  = _{
    add
  | sub
  | mul
  | div
  | ge
  | gt
  | eq
  | le
  | lt
  | or
  | and
  | bitwise_and
  | bitwise_or
  | bitwise_xor
  | bitwise_left_shift
  | bitwise_right_shift
}
sub_expression                   =  { "(" ~ expression ~ ")" }
binary_expr_atom                 = _{ literal | sub_expression | unary_expression | call_expression | symbol }
binary_expression                =  { binary_expr_atom ~ (binary_operator ~ binary_expr_atom)+ }
unary_not                        =  { "!" }
unary_bitwise_not                =  { "~" }
unary_operator                   =  { unary_not | unary_bitwise_not }
unary_expression                 =  { unary_operator ~ (expression | sub_expression) }
call_arg                         =  { expression }
call_expression                  =  { symbol ~ "(" ~ (call_arg ~ ("," ~ call_arg)*)? ~ ")" }
piping_operation                 =  { "|>" ~ call_expression }
dash_expr                        =  { symbol ~ "|>=" ~ call_expression }
expression                       =  { (destructuring_assignment | binary_expression | unary_expression | compound_assignment_expr | assignment_expression | call_expression | dash_expr | symbol | literal) ~ (piping_operation)* }
return_stmt                      =  { "return" ~ expression }
body                             =  { "{" ~ program ~ "}" }
else_stmt                        =  { "else" ~ body }
else_if_stmt                     =  { "else" ~ "if" ~ expression ~ body ~ (else_stmt | else_if_stmt)? }
if_stmt                          =  { "if" ~ expression ~ body ~ (else_stmt | else_if_stmt)? }
while_stmt                       =  { "while" ~ expression ~ body }
for_stmt                         =  { "for" ~ statement ~ ";" ~ expression ~ ";" ~ statement ~ body }
statement                        =  { return_stmt | if_stmt | while_stmt | for_stmt | expression }
closure_param                    =  { symbol }
closure_params                   =  { (closure_param ~ ("," ~ closure_param)*)? }
closure                          =  { "(" ~ closure_params ~ ")" ~ body }
tuple                            =  { "(" ~ expression ~ ("," ~ expression)+ ~ ")" }
destructuring_assignment_symbols =  { symbol ~ ("," ~ symbol)+ }
destructuring_assignment         =  { "(" ~ destructuring_assignment_symbols ~ ")" ~ "=" ~ expression }
map_attribute                    =  { symbol ~ ":" ~ expression }
map                              =  { "{" ~ map_attribute? ~ ("," ~ map_attribute)* ~ "}" }
literal                          =  { string | float | int | boolean | vector | closure | tuple | map }

program = { statement* }
file    = { SOI ~ program ~ EOI }

WHITESPACE = _{ " " | "\n" }
